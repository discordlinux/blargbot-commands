{//;inject functions}
{inject;{get;_gitcmd.functions}}

{if;{logic;||;
{bool;{get;@cohere};==;{null}};
{bool;{commandname};==;cohere}};
{output;This tag cannot be used directly.  Go to <https://dashboard.cohere.com/>, create an account or login, get your API key, and then run:
{repeat;`;3}
b!cc test {escapebbtag;{set;@cohere;YourAPIKeyHere}}
{repeat;`;3}
You may then use this tag as a custom command:
{repeat;`;3}
b!cc set chatbot {escapebbtag;{exec;cohere;{args}}}
{repeat;`;3}
Or in an autoresponse:
{repeat;`;3}
{escapebbtag;{exec;cohere;{messagetext}}}
{repeat;`;3}
}
{return}
}

{switch;{flag;_};
["","help"];
{set;!~chathelp;{embedbuild;
author.name:{guildname};
author.icon_url:{guildicon};
title:Help for chat;
color:{func.dlcolors;brightyellow};
description:Uses [Cohere's](https://cohere.com) command-r-plus engine to provide responses for the given input.  Chat history is saved until user reaches 100k tokens used and then is reset.

__**Arguments**__:;
fields.name:{prefix}chat <message>;
fields.value:Get a response for the given `message`.;
}}
{//;only output json if commandname is help}
{if;{commandname};==;help;
{jget;~chathelp};
{embed;{jget;~chathelp}}
}
{return;false}
}

{//;setup headers}
{if;{get;@cohere.uses.{time;YYYYMM}};>=;500;
{if;{get;@cohere2.uses.{time;YYYYMM}};>=;500;
{set;!~cohere.token;{get;@cohere3}}
{set;!~token.num;3};
{set;!~cohere.token;{get;@cohere2}}
{set;!~token.num;2}
};
{set;!~cohere.token;{get;@cohere}}
}
{jset;~head;method;POST;c}
{jset;~head;headers.content-type;application/json;c}
{jset;~head;headers.Authorization;Bearer {get;~cohere.token};c}


{//;setup body}
{set;!~body;{j;{"temperature":0.3,"stream":false,"max_tokens":4000}}}
{jset;~body.preamble;Your name is sudobot, a bot in the Discord server Discord Linux.  Keep your responses below 4000 characters.}
{jset;~body;model;command-r-plus;c}
{jset;~body;message;{join;{slice;{split;{messagetext};chat{space}};1;};chat{space}};c}
{jset;~body;prompt_truncation;AUTO;c}
{jset;~body;citation_quality;accurate;c}
{jset;~body;connectors;[];c}
{jset;~body;connectors.0.id;web-search;c}
{if;{get;_cohere.id.{userid}};==;{null};
{set;!_cohere.id.{userid};{guildid}_{userid}_{time;X}}
}
{jset;~body;conversation_id;{get;_cohere.id.{userid}};c}

{//;if last message and response stored, send those}
{//;{if;{logic;&&;
{bool;{get;_cohere.last.msg.{userid}};!=;{null}};
{bool;{get;_cohere.last.response.{userid}};!=;{null}}};
{jset;~body;chat_history;[];c}
{jset;~body;chat_history.0.role;User;c}
{jset;~body;chat_history.0.message;{get;_cohere.last.msg.{userid}};c}
{jset;~body;chat_history.1.role;Chatbot;c}
{jset;~body;chat_history.1.message;{get;_cohere.last.response.{userid}};c}
}

{//;if message and response before last stored, send those also}
{if;{logic;&&;
{bool;{get;_cohere.last.msg2.{userid}};!=;{null}};
{bool;{get;_cohere.last.response2.{userid}};!=;{null}}};
{jset;~body;chat_history.2.role;User;c}
{jset;~body;chat_history.2.message;{get;_cohere.last.msg2.{userid}};c}
{jset;~body;chat_history.3.role;Chatbot;c}
{jset;~body;chat_history.3.message;{get;_cohere.last.response2.{userid}};c}
}
}

{//;set variables for message and response before last}
{set;_cohere.last.response2.{userid};{get;_cohere.last.response.{userid}}}
{set;_cohere.last.msg2.{userid};{get;_cohere.last.msg.{userid}}}

{//;send waiting message}
{set;!~comsg;{output;{usernick}: Fetching response... <a:hacker:478073442311077889>}}
{set;!~cotime;{time;X}}

{//;make request}
{set;!~fetch;{request;https://api.cohere.ai/v1/chat;{jget;~head};{jget;~body}}}

{//;check result}
{if;{logic;&&;
{bool;{jget;~fetch;status};==;200};
{bool;{jget;~fetch;body.text};!=;{null}}};
{set;!@cohere{get;~token.num}.uses.{time;YYYYMM};{math;+;1;0{get;@cohere{get;~token.num}.uses.{time;YYYYMM}}}}
{//;reset conversation_id if more than 100k tokens used}
{set;!~total.tokens;{math;+;{jget;~fetch;body.meta.tokens.input_tokens};{jget;~fetch;body.meta.tokens.output_tokens}}}
{if;{get;~total.tokens};>;100000;
{set;!_cohere.id.{userid};{guildid}_{userid}_{time;X}}
}
{//;setup array of sources}
{set;~cosources;{jclean;{func.uniq;{map;~source;{jget;~fetch;body.documents};[{substring;{jget;~source;title};0;30}{if;{length;{jget;~source;title}};>;30;...}](<{jget;~source;url}>)}}}}
{//;set variables for last message and response}
{set;_cohere.last.msg.{userid};{args}}
{set;_cohere.last.response.{userid};{regexreplace;{jget;~fetch;body.text};/(@everyone|@here|<@)/g;<\@}}
{//;if length is more than 2k characters, output in embed, otherwise output directly}
{set;!~resp.out;{reverse;{replace;{reverse;{usernick}};_;}}: {jget;~fetch;body.text}{newline}{zws}{newline}Sources: {join;~cosources;,{space}}{newline}Tokens used: {get;~total.tokens}}
{if;{length;{get;~resp.out}};>;2000;
{edit;{channelid};{get;~comsg};_delete;{embedbuild;
description:{if;{length;{get;~resp.out}};<;4000;{get;~resp.out};[View Full Response Here]({dump;{get;~resp.out}}){newline}{zws}{newline}{substring;{get;~resp.out};0;3900}{space}[...]};
}};
{edit;{channelid};{get;~comsg};{get;~resp.out}}
};
{//;output error message if failed}
{edit;{channelid};{get;~comsg};{usernick}: {fallback;{regexreplace;{get;~fetch};/\n/g;} (failed after {math;-;{time;X};{get;~cotime}}s)}{jget;~fetch;body.message}}
}
